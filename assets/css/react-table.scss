.ReactTable {
  position: relative;
  display: flex;
  flex-direction: column;
  border: 1px solid alpha(black, .1);

  * {
    box-sizing: border-box;
  }

  .rt-table {
    flex: auto 1;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    width: 100%;
    border-collapse: collapse;
    overflow: auto;
  }

  .rt-thead {
    flex: 1 0 auto;
    display: flex;
    flex-direction: column;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;

    &.-headerGroups {
      background: alpha(black, .03);
      border-bottom: 1px solid alpha(black, .05);
    }

    &.-filters {
      border-bottom: 1px solid alpha(black, 0.05);

      input select {
        border: 1px solid rgba(0, 0, 0, 0.1);
        background: white;
        padding: 5px 7px;
        font-size: inherit;
        border-radius: 3px;
        font-weight: normal;
        outline-width: 0;
      }

      .rt-th {
        border-right: 1px solid alpha(black, 0.02);
      }
    }

    &.-header {
      box-shadow: 0 2px 15px 0px alpha(black, .15);
    }

    .rt-tr {
      text-align: center
    }

    .rt-th .rt-td {
      padding: 5px 5px;
      line-height: normal;
      position: relative;
      border-right: 1px solid alpha(black, .05);
      transition box-shadow .3s $easeOutBack;
      box-shadow: inset 0 0 0 0 transparent;

      &.-sort-asc {
        box-shadow: inset 0 3px 0 0 alpha(black, .6);
      }

      &.-sort-desc {
        box-shadow: inset 0 -3px 0 0 alpha(black, .6);
      }

      &.-cursor-pointer {
        cursor: pointer;
      }

      &:last-child {
        border-right: 0;
      }
    }

    .rt-th:focus {
      outline-width: 0;
    }

    .rt-resizable-header {
      overflow: visible;

      &:last-child {
        overflow: hidden;
      }
    }

    .rt-resizable-header-content {
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .rt-header-pivot {
      border-right-color: #f7f7f7;
    }

    .rt-header-pivot:after, .rt-header-pivot:before {
      left: 100%;
      top: 50%;
      border: solid transparent;
      content: " ";
      height: 0;
      width: 0;
      position: absolute;
      pointer-events: none;
    }

    .rt-header-pivot:after {
      border-color: rgba(255, 255, 255, 0);
      border-left-color: #FFF;
      border-width: 8px;
      margin-top: -8px;
    }

    .rt-header-pivot:before {
      border-color: rgba(102, 102, 102, 0);
      border-left-color: #f7f7f7;
      border-width: 10px;
      margin-top: -10px;
    }
  }

  .rt-tbody {
    flex: 99999 1 auto;
    display: flex;
    flex-direction: column;
    overflow: auto;

    .rt-tr-group {
      border-bottom: solid 1px alpha(black, .05);

      &:last-child {
        border-bottom: 0;
      }
    }

    .rt-td {
      border-right: 1px solid alpha(black, .02);

      &:last-child {
        border-right: 0;
      }
    }

    .rt-expandable {
      cursor: pointer;
      text-overflow: clip;
    }
  }

  .rt-tr-group {
    flex: 1 0 auto;
    display: flex;
    flex-direction: column;
    align-items: stretch;
  }

  .rt-tr {
    flex: 1 0 auto;
    display: inline-flex;
  }

  .rt-th .rt-td {
    flex: 1 0 0px;
    white-space: nowrap;
    text-overflow: ellipsis;
    padding: 7px 5px;
    overflow: hidden;
    transition: .3s ease;
    transition-property: width, min-width, padding, opacity;

    &.-hidden {
      width: 0 !important;
      min-width: 0 !important;
      padding: 0 !important;
      border:0 !important;
      opacity: 0 !important;
    }

  }

  .rt-expander {
    display: inline-block;
    position:relative;
    margin: 0;
    color: transparent;
    margin: 0 10px;

    &:after {
      content: '';
      position: absolute;
      width: 0;
      height: 0;
      top:50%;
      left:50%;
      transform: translate(-50%, -50%) rotate(-90deg);
      border-left: ($expandSize * .72) solid transparent;
      border-right: ($expandSize * .72) solid transparent;
      border-top: $expandSize solid alpha(black, .8);
      transition: all .3s $easeOutBack;
      cursor: pointer;
    }

    &.-open:after {
      transform: translate(-50%, -50%) rotate(0deg);
    }
  }

}
